{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Pipe, forwardRef, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ContentChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction BarRating_div_2_2_ng_template_0_Template(rf, ctx) {}\n\nfunction BarRating_div_2_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, BarRating_div_2_2_ng_template_0_Template, 0, 0, \"ng-template\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n\n    const _r2 = i0.ɵɵreference(5);\n\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r9.customFractionRating == null ? null : ctx_r9.customFractionRating.template) || _r2);\n  }\n}\n\nfunction BarRating_div_2_3_ng_template_0_Template(rf, ctx) {}\n\nfunction BarRating_div_2_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, BarRating_div_2_3_ng_template_0_Template, 0, 0, \"ng-template\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n\n    const _r6 = i0.ɵɵreference(9);\n\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r10.customInActiveRating == null ? null : ctx_r10.customInActiveRating.template) || _r6);\n  }\n}\n\nfunction BarRating_div_2_4_ng_template_0_Template(rf, ctx) {}\n\nfunction BarRating_div_2_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, BarRating_div_2_4_ng_template_0_Template, 0, 0, \"ng-template\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n\n    const _r4 = i0.ɵɵreference(7);\n\n    i0.ɵɵproperty(\"ngTemplateOutlet\", (ctx_r11.customActiveRating == null ? null : ctx_r11.customActiveRating.template) || _r4);\n  }\n}\n\nfunction BarRating_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function BarRating_div_2_Template_div_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const unit_r8 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(unit_r8.click($event));\n    })(\"mouseenter\", function BarRating_div_2_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const unit_r8 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(unit_r8.enter());\n    });\n    i0.ɵɵelementContainerStart(1, 7);\n    i0.ɵɵtemplate(2, BarRating_div_2_2_Template, 1, 1, null, 8);\n    i0.ɵɵtemplate(3, BarRating_div_2_3_Template, 1, 1, null, 8);\n    i0.ɵɵtemplate(4, BarRating_div_2_4_Template, 1, 1, null, 9);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const unit_r8 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitch\", unit_r8.state);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", ctx_r0.unitState.fraction);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", ctx_r0.unitState.inactive);\n  }\n}\n\nfunction BarRating_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"rateTitle\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, ctx_r1.nextRate + 1, ctx_r1.titles));\n  }\n}\n\nfunction BarRating_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 12);\n  }\n}\n\nfunction BarRating_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 13);\n  }\n}\n\nfunction BarRating_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 14);\n  }\n}\n\nlet ActiveRating = /*#__PURE__*/(() => {\n  class ActiveRating {\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  ActiveRating.ɵfac = function ActiveRating_Factory(t) {\n    return new (t || ActiveRating)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  ActiveRating.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ActiveRating,\n    selectors: [[\"\", \"ratingActive\", \"\"]]\n  });\n  return ActiveRating;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet InactiveRating = /*#__PURE__*/(() => {\n  class InactiveRating {\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  InactiveRating.ɵfac = function InactiveRating_Factory(t) {\n    return new (t || InactiveRating)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  InactiveRating.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: InactiveRating,\n    selectors: [[\"\", \"ratingInactive\", \"\"]]\n  });\n  return InactiveRating;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FractionRating = /*#__PURE__*/(() => {\n  class FractionRating {\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  FractionRating.ɵfac = function FractionRating_Factory(t) {\n    return new (t || FractionRating)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  FractionRating.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FractionRating,\n    selectors: [[\"\", \"ratingFraction\", \"\"]]\n  });\n  return FractionRating;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarRatingPipe = /*#__PURE__*/(() => {\n  class BarRatingPipe {\n    transform(value = 0, titles) {\n      /** Initialize value with 0 in case of undefined */\n      return titles[value] || value;\n    }\n\n  }\n\n  BarRatingPipe.ɵfac = function BarRatingPipe_Factory(t) {\n    return new (t || BarRatingPipe)();\n  };\n\n  BarRatingPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"rateTitle\",\n    type: BarRatingPipe,\n    pure: true\n  });\n  return BarRatingPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** This allows support [(ngModel)] and ngControl. */\n\n\nconst RATING_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => BarRating),\n  multi: true\n};\n/** This allows control required validation. */\n\nconst RATING_VALUE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => BarRating),\n  multi: true\n};\nvar BarRatingUnitState = /*#__PURE__*/(() => {\n  (function (BarRatingUnitState) {\n    BarRatingUnitState[\"active\"] = \"active\";\n    BarRatingUnitState[\"inactive\"] = \"inactive\";\n    BarRatingUnitState[\"selected\"] = \"selected\";\n    BarRatingUnitState[\"fraction\"] = \"fraction\";\n  })(BarRatingUnitState || (BarRatingUnitState = {}));\n\n  return BarRatingUnitState;\n})();\nlet BarRating = /*#__PURE__*/(() => {\n  class BarRating {\n    constructor(changeDetectorRef) {\n      this.changeDetectorRef = changeDetectorRef;\n      this.unitState = BarRatingUnitState;\n      this.contexts = [];\n      /** Maximal rating that can be given using this widget. */\n\n      this.max = 5;\n      /** A flag indicating if rating can be updated. */\n\n      this.readOnly = false;\n      /** Set the theme */\n\n      this.theme = 'default';\n      /** Show rating title */\n\n      this.showText = false;\n      /** Replace rate value with a title */\n\n      this.titles = [];\n      /** A flag indicating if rating is required for form validation. */\n\n      this.required = false;\n      /**\r\n       * A stream that emits when a user is hovering over a given rating.\r\n       * Event's payload equals to the rating being hovered over.\r\n       */\n\n      this.hover = new EventEmitter();\n      /**\r\n       * A stream that emits when a user stops hovering over a given rating.\r\n       * Event's payload equals to the rating of the last item being hovered over.\r\n       */\n\n      this.leave = new EventEmitter();\n      /**\r\n       * A stream that emits when a user selects a new rating.\r\n       * Event's payload equals to the newly selected rating.\r\n       */\n\n      this.rateChange = new EventEmitter(true);\n      /**\r\n       * A stream that forwards a bar rating click since clicks are not propagated\r\n       */\n\n      this.barClick = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      if (changes.rate) {\n        this.update(this.rate);\n      }\n    }\n\n    ngOnInit() {\n      this.contexts = Array.from({\n        length: this.max\n      }, (context, i) => ({\n        state: BarRatingUnitState.inactive,\n        click: () => this.handleClick(i + 1),\n        enter: () => this.handleEnter(i + 1)\n      }));\n      this.updateState(this.rate);\n    }\n\n    update(newRate, internalChange = true) {\n      if (!this.readOnly && !this.disabled && this.rate !== newRate) {\n        this.rate = newRate;\n        this.rateChange.emit(this.rate);\n      }\n\n      if (internalChange) {\n        this.onChange(this.rate);\n        this.onTouched();\n      }\n\n      this.updateState(this.rate);\n    }\n    /** Reset rate value */\n\n\n    reset() {\n      this.leave.emit(this.nextRate);\n      this.updateState(this.rate);\n    }\n\n    updateState(nextValue) {\n      /** Set rate value as text */\n      this.nextRate = nextValue - 1;\n      /** Set the rating */\n\n      this.contexts = Array.from({\n        length: this.max\n      }, (context, index) => ({\n        state: index + 1 <= nextValue ? BarRatingUnitState.selected : (index + 1 === Math.round(nextValue) && nextValue % 1) >= 0.5 ? BarRatingUnitState.fraction : BarRatingUnitState.inactive,\n        click: () => this.handleClick(index),\n        enter: () => this.handleEnter(index)\n      }));\n    }\n\n    handleClick(value) {\n      this.update(value + 1);\n    }\n\n    handleEnter(index) {\n      if (!this.disabled && !this.readOnly) {\n        /** Add selected class for rating hover */\n        this.contexts.map((context, i) => {\n          context.state = i <= index ? BarRatingUnitState.active : BarRatingUnitState.inactive;\n        });\n        this.nextRate = index;\n        this.hover.emit(index);\n      }\n    }\n    /** This is the initial value set to the component */\n\n\n    writeValue(value) {\n      this.update(value, false);\n      this.changeDetectorRef.markForCheck();\n    }\n\n    validate(c) {\n      return this.required && !c.value ? {\n        required: true\n      } : null;\n    }\n\n    onChange(_) {}\n\n    onTouched() {}\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n  }\n\n  BarRating.ɵfac = function BarRating_Factory(t) {\n    return new (t || BarRating)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  BarRating.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BarRating,\n    selectors: [[\"bar-rating\"]],\n    contentQueries: function BarRating_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ActiveRating, 5);\n        i0.ɵɵcontentQuery(dirIndex, InactiveRating, 5);\n        i0.ɵɵcontentQuery(dirIndex, FractionRating, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customActiveRating = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customInActiveRating = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customFractionRating = _t.first);\n      }\n    },\n    inputs: {\n      rate: \"rate\",\n      max: \"max\",\n      readOnly: \"readOnly\",\n      theme: \"theme\",\n      showText: \"showText\",\n      titles: \"titles\",\n      required: \"required\"\n    },\n    outputs: {\n      hover: \"hover\",\n      leave: \"leave\",\n      rateChange: \"rateChange\",\n      barClick: \"barClick\"\n    },\n    features: [i0.ɵɵProvidersFeature([RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR]), i0.ɵɵNgOnChangesFeature],\n    decls: 10,\n    vars: 9,\n    consts: [[1, \"br-units\", 3, \"mouseleave\"], [\"class\", \"br-unit\", 3, \"click\", \"mouseenter\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"br-text\", 4, \"ngIf\"], [\"fractionTemplate\", \"\"], [\"activeTemplate\", \"\"], [\"inactiveTemplate\", \"\"], [1, \"br-unit\", 3, \"click\", \"mouseenter\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [3, \"ngTemplateOutlet\"], [1, \"br-text\"], [1, \"br-unit-inner\", \"br-fraction\"], [1, \"br-unit-inner\", \"br-active\"], [1, \"br-unit-inner\", \"br-inactive\"]],\n    template: function BarRating_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n        i0.ɵɵlistener(\"mouseleave\", function BarRating_Template_div_mouseleave_1_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtemplate(2, BarRating_div_2_Template, 5, 3, \"div\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, BarRating_div_3_Template, 3, 4, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, BarRating_ng_template_4_Template, 1, 0, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(6, BarRating_ng_template_6_Template, 1, 0, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(8, BarRating_ng_template_8_Template, 1, 0, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"br br-\", ctx.customInActiveRating ? \"\" : ctx.theme, \"\");\n        i0.ɵɵclassProp(\"br-readonly\", ctx.readOnly)(\"br-disabled\", ctx.disabled);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.contexts);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showText);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, BarRatingPipe],\n    styles: [\"*[_ngcontent-%COMP%]{box-sizing:border-box}[_nghost-%COMP%]{--br-font-size: 16px;--br-gap: 0;--br-active-color: #EDB867;--br-inactive-color: #D2D2D2}.br[_ngcontent-%COMP%]{position:relative}.br-units[_ngcontent-%COMP%]{display:flex;flex-wrap:nowrap;gap:var(--br-gap)}.br-unit[_ngcontent-%COMP%]{font-size:var(--br-font-size);cursor:pointer;-webkit-font-smoothing:antialiased;text-rendering:auto}.br-unit-inner[_ngcontent-%COMP%]{position:relative}.br-readonly[_ngcontent-%COMP%]   .br-unit[_ngcontent-%COMP%], .br-disabled[_ngcontent-%COMP%]   .br-unit[_ngcontent-%COMP%]{cursor:default}\"],\n    changeDetection: 0\n  });\n  return BarRating;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarRatingModule = /*#__PURE__*/(() => {\n  class BarRatingModule {}\n\n  BarRatingModule.ɵfac = function BarRatingModule_Factory(t) {\n    return new (t || BarRatingModule)();\n  };\n\n  BarRatingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BarRatingModule\n  });\n  BarRatingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule]\n  });\n  return BarRatingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ActiveRating, BarRating, BarRatingModule, FractionRating, InactiveRating }; //# sourceMappingURL=ngx-bar-rating.mjs.map","map":null,"metadata":{},"sourceType":"module"}